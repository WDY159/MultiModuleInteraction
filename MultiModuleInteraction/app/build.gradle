apply plugin: 'com.android.application'
apply from: 'module.gradle'
apply from: 'update-aar.gradle'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"
    defaultConfig {
        applicationId "com.example.multimodule"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    println "hello world"
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
    compile_submodule(getProject())
    compile_submodule2(getProject())
    compile_spacebase(getProject())
    compile_interface(getProject())
}


def compile_submodule(Project projectModule){
    projectModule.dependencies{
        if (isAllDebug.toBoolean() || isSubmoduleDebug.toBoolean()) {
            compile project(':submodule')
            println "compile-----------submodule"
        } else {
            compile(name: 'submodule-release', ext: 'aar')
            println "compile-----------submodule-release.aar"
        }
    }
}
def compile_submodule2(Project projectModule){
    projectModule.dependencies{
        if (isAllDebug.toBoolean() || isSubmodule2Debug.toBoolean()) {
            compile project(':submodule2')
        } else {
            compile(name: 'submodule2-release', ext: 'aar')
        }
    }
}
def compile_interface(Project projectModule){
    projectModule.dependencies{
        if (isAllDebug.toBoolean() || isInterfaceDebug.toBoolean()) {
            compile project(':interface')
        } else {
            compile(name: 'interface-release', ext: 'aar')
        }
    }
}



def compile_spacebase(Project projectModule){
    projectModule.dependencies{
        if (isAllDebug.toBoolean() || isBasemoduleDebug.toBoolean()) {
            compile project(':basemodule')
        } else {
            compile(name: 'basemodule-release', ext: 'aar')
//            compile_interface(getProject())
//            compile dep.picasso
//            compile dep.recyclerView
//            compile dep.appcompatV7
//            compile dep.supportAnnotations
//            compile dep.design
//            compile dep.eventbus

        }
    }

}
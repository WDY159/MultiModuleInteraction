apply plugin: 'com.android.application'
apply from: 'update-aar.gradle'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"
    defaultConfig {
        applicationId "com.example.multimodule"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
    compile project(':submodule')
    compile project(':submodule2')
}
//task updateAAR  {
//    doLast {
////        eachLibsAAR()
//        eachModuleAAR()
//    }
//}
//


//def eachModuleAAR(){
//    def libPath= getRootProject().projectDir.getAbsolutePath()+"/libs/";
//    println '\n' +libPath;
//    println '\n' +getAllprojects();
//    for (Project project : getRootProject().getAllprojects()) {
//
//        def projectModuleAARPath=project.buildDir.absolutePath+"/outputs/aar/";
//        def dir = new File(projectModuleAARPath)
//        if (!dir.exists()) continue
//
//        dir.eachFile { File file ->
////            if (libsModuleAAR.name.contains(file.name)) {
//                copy{
//                    from file.absolutePath
//                    into libPath
////                }
////                println '\n' + libsModuleAAR.name + ' Update SUCCESS!'
//            }
//        }
//    }
//}

//def eachLibsAAR(){
//    def libPath= getRootProject().projectDir.getAbsolutePath()+"/libs/";
//    def libDir = new File(libPath)
//    if (libDir.exists()){
//        libDir.eachFile {
//            eachModuleAAR(it)
//        }
//    }
//}
//task copyApks(type: Copy) {
//    doLast {
//        from('submodule/build/outputs/aar/submodule-release.aar')
//        exclude '*unaligned*'
//        into('libs')
//    }
//}